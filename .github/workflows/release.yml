name: Release
on:
    workflow_call:
        inputs:
            dry-run:
                description: 'Compiles the app but not upload artifacts to distribution server'
                default: false
                required: false
                type: boolean

concurrency:
    group: release-${{ github.ref }}
    cancel-in-progress: true

defaults:
    run:
        shell: 'bash'

jobs:
    draft_release:
        strategy:
            fail-fast: true
            matrix:
                os: [windows-latest]
        #    To compile the application for different platforms, use:
        #    os: [ macos-latest, ubuntu-latest, windows-latest ]

        runs-on: ${{ matrix.os }}
        outputs:
            release-note: ${{ steps.release-note.outputs.release-note }}

        steps:
            - uses: actions/checkout@v3

            - uses: actions/setup-node@v3
              with:
                  node-version: 18
                  cache: 'npm'

            - run: npm ci
              env:
                  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

            # The easiest way to transfer release notes to a compiled application is create `release-notes.md` in the build resources.
            # See https://github.com/electron-userland/electron-builder/issues/1511#issuecomment-310160119
            - name: Prepare release notes
              env:
                  RELEASE_NOTE: ${{ needs.draft.outputs.release-note }}
              run: echo "$RELEASE_NOTE" >> ./buildResources/release-notes.md

            - run: npm run build

            - name: Compile artifacts ${{ inputs.dry-run && '' || 'and upload them to github release' }}
              # I use this action because it is capable of retrying multiple times if there are any issues with the distribution server
              uses: nick-fields/retry@v2
              with:
                  timeout_minutes: 15
                  max_attempts: 6
                  retry_wait_seconds: 15
                  retry_on: error
                  shell: 'bash'
                  command: npx --no-install electron-builder --config .electron-builder.config.js --publish ${{ inputs.dry-run && 'never' || 'always' }}
              env:
                  # Code Signing params
                  # See https://www.electron.build/code-signing
                  # CSC_LINK: ''
                  # CSC_KEY_PASSWORD: ''
                  # Publishing artifacts
                  GH_TOKEN: ${{ secrets.github_token }} # GitHub token, automatically provided (No need to define this secret in the repo settings)
